(defun cci-btree-common-ancestor (node1 node2)
  (let ((found)
        (current1 (cci-node-parent node1))
        (current2 (cci-node-parent node2)))
    (while (and (not found)
                (or current1 current2))
      (setq found
            (cond ((equal current1 current2) current1)
                  ((cci-node-visitedp current1) current1)
                  ((cci-node-visitedp current2) current2)))
      (cci-node-visit current1)
      (cci-node-visit current2)
      (setq current1 (cci-node-parent node1)
            current2 (cci-node-parent node2)))
    found))

(let ((n0 (cci-node-create 0))
      (n1 (cci-node-create 1))
      (n2 (cci-node-create 2)))
  (cci-node-set-left-tree n0 n1)
  (cci-node-set-right-tree n0 n2)
  (equal n0 (cci-btree-common-ancestor n1 n2)))

(let ((n0 (cci-node-create 0))
      (n1 (cci-node-create 1))
      (n2 (cci-node-create 2)))
  (cci-node-set-left-tree n0 n1)
  (cci-node-set-left-tree n1 n2)
  (equal n0 (cci-btree-common-ancestor n1 n2)))

(let ((n0 (cci-node-create 0))
      (n1 (cci-node-create 1))
      (n2 (cci-node-create 2))
      (n3 (cci-node-create 3)))
  (cci-node-set-right-tree n0 n1)
  (cci-node-set-left-tree n0 n2)
  (cci-node-set-left-tree n2 n3)
  (equal n0 (cci-btree-common-ancestor n1 n3)))

