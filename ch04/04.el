(defun cci-lists-add-to-list-at (lists n element)
  "Add an ELEMENT to the N-th list within a given LISTS."
  (let ((target-list lists)
	(i 0))
    (while (< i n)
      (when (not (cdr target-list))
	(setcdr target-list (cons nil nil)))
      (setq target-list (cdr target-list))
      (setq i (1+ i)))
    (setcar target-list (cons element (car target-list)))))

(let ((lists (cons nil nil)))
  (cci-lists-add-to-list-at lists 0 "00")
  (cci-lists-add-to-list-at lists 1 "10")
  (cci-lists-add-to-list-at lists 1 "11")
  (cci-lists-add-to-list-at lists 3 "30")
  lists)
;; => (("00") ("11" "10") nil ("30"))

(defun cci-tree-to-lists (tree)
  "Return a list of lists each of which contains nodes at the
same depth in the given binary TREE."
  (when tree
    (let ((queue (cci-queue-create))
	  (lists (cons nil nil)))
      (cci-queue-enqueue queue (cons tree 0))
      (while (cci-queue-peek queue)
	(let ((elem (cci-queue-dequeue queue)))
	  (let ((node (car elem))
		(depth (cdr elem)))
	    (cci-lists-add-to-list-at lists depth (cci-node-value node))
	    (let ((children (cci-node-adjacent-nodes node)))
	      (while children
		(cci-queue-enqueue queue (cons (car children) (1+ depth)))
		(setq children (cdr children)))))))
      lists)))

(let ((n1 (cci-node-create 1))
      (n2 (cci-node-create 2))
      (n3 (cci-node-create 3))
      (n4 (cci-node-create 4))
      (n5 (cci-node-create 5))
      (n6 (cci-node-create 6))
      (n7 (cci-node-create 7)))
  (cci-node-connect n1 n2)
  (cci-node-connect n1 n3)
  (cci-node-connect n2 n4)
  (cci-node-connect n2 n5)
  (cci-node-connect n3 n6)
  (cci-node-connect n3 n7)
  (cci-tree-to-lists n1))
;; => ((1) (2 3) (4 5 6 7))
